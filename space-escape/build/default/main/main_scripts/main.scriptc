
áQ
¾Q--[[ 
=============================================================================================

Lua Script File:  	main.script

Script Summary: Provides the general support functions related to game actions. This
script includes the following features:

- Initializes the GameState and sets main menu as the opening game level
- Serves as the Controller between the main menu, Level1, Level2, and Game Over (loading/unloading
collections; enabling/disabling GUIs and message control between game levels).

=============================================================================================
--]]

-- ------------------------------------------------------------------------------------------
-- Initialization 
-- ------------------------------------------------------------------------------------------
local player_score = 0  -- Define the player score in the main script
local high_score = 0
function init(self)	
    -- Load the high score at the start of the game
    load_high_score()
    
    -- Set the main menu as the starting Game Level for this application
    msg.post(".", "start_main_menu")
    
    -- Set a Script Property with the initial GameState Status
    self.state = "MAIN_MENU"			
end

-- ------------------------------------------------------------------------------------------
-- High Score Handling
-- ------------------------------------------------------------------------------------------

-- Function to load the high score from file
function load_high_score()
    local file = io.open("high_score.txt", "r")  -- Try to open the file in read mode
    if file then
        local score = tonumber(file:read("*all"))  -- Read the score and convert it to a number
        if score then
            high_score = score
        else
            -- If the score is invalid (e.g., non-numeric), set it to 0
            high_score = 0
        end
        file:close()  -- Close the file
    else
        -- If the file doesn't exist, create it
        high_score = 0
        save_high_score()  -- Save the initial high score (0)
    end
end

-- Function to save the high score to file
function save_high_score()
    local file = io.open("high_score.txt", "w")  -- Open the file in write mode
    if file then
        file:write(tostring(high_score))  -- Write the high score to the file
        file:close()  -- Close the file
    else
        print("Error: Unable to save high score to file!")
    end
end

-- Function to reset the high score to 0
function reset_hi_score()
    high_score = 0  -- Reset the high score to 0

    -- Save the new high score (0) to the file
    save_high_score()
    load_high_score()
end
-- ------------------------------------------------------------------------------------------
-- Score Handling
-- ------------------------------------------------------------------------------------------

-- Function to update the score
function update_score(self, score)
    player_score = player_score + score

    -- Check if the current scene is LEVEL3_RUNNING before updating the high score
    if self.state == "LEVEL3_RUNNING" then
        -- Update the high score only if the player's score exceeds it
        if player_score > high_score then
            high_score = player_score  -- Update the high score
            save_high_score()  -- Save the new high score to the file
        end
    end

    -- Send the updated score to HUD
    msg.post("level3:/hud#player_hud", "update_score", { score = player_score })
end


-- ------------------------------------------------------------------------------------------
-- Stop Sound Utility Function
-- ------------------------------------------------------------------------------------------
local function stop_current_level_sound(state)
    if state == "LEVEL1_RUNNING" then
        msg.post("main:/audio#sound", "stop_sound")
    elseif state == "LEVEL2_RUNNING" then
        msg.post("main:/audio#sound", "stop_sound")
    elseif state == "LEVEL3_RUNNING" then
        msg.post("main:/audio#sound", "stop_sound")
    elseif state == "MAIN_MENU" then
        msg.post("main:/audio#sound", "stop_sound")
    elseif state == "LEVELCOMPLETE_RUNNING" then
        msg.post("main:/audio#sound", "stop_sound")
    elseif state == "GAMEOVER_RUNNING" then
        msg.post("main:/audio#sound", "stop_sound")
    end
end

-- ------------------------------------------------------------------------------------------
-- Play Sound Utility Function
-- ------------------------------------------------------------------------------------------
local function play_main_menu_sound()
    -- Play the sound for the main menu screen
    msg.post("main:/audio#sound", "play_sound")
end

-- ------------------------------------------------------------------------------------------
-- Message Processing  
-- ------------------------------------------------------------------------------------------
function on_message(self, message_id, message, sender)
    
    -- Handle score-related messages
    if message_id == hash("update_score") then
        update_score(self, message.score)
    end
    if message_id == hash("reset_hi_score") then
        reset_hi_score()
    end
    -- When the game over collection is fully loaded, send the score
    if message_id == hash("proxy_loaded") then
        if sender == msg.url("#gameover_proxy") then
            -- Send the display_score message once the game over collection is loaded
            msg.post("gameover:/main#game_over", "display_score", { score = player_score })
            msg.post("gameover:/main#game_over", "display_hi_score", { hi_score = high_score })
        end
    end
    
    -- Handling transitions between game levels

    -- When starting the main menu
    if message_id == hash("start_main_menu") then
        if self.state ~= "MAIN_MENU" then
            stop_current_level_sound(self.state)
            -- Unload other levels and game over screen if necessary
            if self.state == "LEVEL1_RUNNING" then
                msg.post("#level1_proxy", "unload")
            end

            if self.state == "LEVEL2_RUNNING" then
                msg.post("#level2_proxy", "unload")
            end
            
            if self.state == "LEVELCOMPLETE_RUNNING" then
                msg.post("#levelcomplete_proxy", "unload")
            end
            
            if self.state == "LEVEL3_RUNNING" then
                -- Add a delay of 2 seconds before unloading level 3
                timer.delay(2, false, function()
                    -- Unload level 3 after the delay
                    msg.post("#level3_proxy", "unload")
                end)
            end
            if self.state == "GAMEOVER_RUNNING" then
                msg.post("#gameover_proxy", "unload")
            end
        end

        -- Enable the main menu
        msg.post("#main_menu", "enable")
        player_score = 0 -- Reset Player Score whenever main menu is entered
        self.state = "MAIN_MENU"

        -- Play sound when transitioning to the main menu
        play_main_menu_sound()

        -- When starting level 1
    elseif message_id == hash("start_level1") then
        stop_current_level_sound(self.state)
        if self.state == "GAMEOVER_RUNNING" then
            msg.post("#gameover_proxy", "unload")
        end

        msg.post("#level1_proxy", "load")
        msg.post("#main_menu", "disable")
        self.state = "LEVEL1_RUNNING"

        -- When starting level 2
    elseif message_id == hash("start_level2") then
        stop_current_level_sound(self.state)
        if self.state == "GAMEOVER_RUNNING" then
            msg.post("#gameover_proxy", "unload")
        end

        msg.post("#level2_proxy", "load")
        msg.post("#main_menu", "disable")
        self.state = "LEVEL2_RUNNING"

        -- When starting level 3
    elseif message_id == hash("start_level3") then
        stop_current_level_sound(self.state)
        if self.state == "GAMEOVER_RUNNING" then
            msg.post("#gameover_proxy", "unload")
        end

        msg.post("#level3_proxy", "load")
        msg.post("#main_menu", "disable")
        self.state = "LEVEL3_RUNNING"
        
    elseif message_id == hash("start_levelcomplete") then
        stop_current_level_sound(self.state)
        if self.state == "LEVEL1_RUNNING" then
            msg.post("#level1_proxy", "unload")
        end
        if self.state == "LEVEL2_RUNNING" then
            msg.post("#level2_proxy", "unload")
        end

        msg.post("#levelcomplete_proxy", "load")
        msg.post("#main_menu", "disable")
        self.state = "LEVELCOMPLETE_RUNNING"

        -- When starting the game over screen
    elseif message_id == hash("start_gameover") then
        stop_current_level_sound(self.state)

        -- Unload the active level and menu
        if self.state == "LEVEL1_RUNNING" then
            msg.post("#level1_proxy", "unload")
        end

        if self.state == "LEVEL2_RUNNING" then
            msg.post("#level2_proxy", "unload")
        end

        if self.state == "LEVEL3_RUNNING" then
            msg.post("#level3_proxy", "unload")
        end

        if self.state == "MAIN_MENU" then
            msg.post("#main_menu", "disable")
        end

        -- Now load the game over collection
        msg.post("#gameover_proxy", "load")
        self.state = "GAMEOVER_RUNNING"

        -- Wait for the collection to be fully loaded
        -- Listen for the proxy_loaded message to know when the game over screen is ready
        msg.post("#gameover_proxy", "proxy_loaded")
        
        -- Handle proxy_loaded for collection enable
    elseif message_id == hash("proxy_loaded") then
        if sender == msg.url("#level1_proxy") then
            msg.post(sender, "enable")
            self.state = "LEVEL1_RUNNING"
        end

        if sender == msg.url("#level2_proxy") then
            msg.post(sender, "enable")
            self.state = "LEVEL2_RUNNING"
        end

        if sender == msg.url("#level3_proxy") then
            msg.post(sender, "enable")
            self.state = "LEVEL3_RUNNING"
        end

        if sender == msg.url("#levelcomplete_proxy") then
            msg.post(sender, "enable")
            self.state = "LEVELCOMPLETE_RUNNING"
        end

        if sender == msg.url("#gameover_proxy") then
            msg.post(sender, "enable")
            self.state = "GAMEOVER_RUNNING"
        end
    end    
end
@main/main_scripts/main.script" 