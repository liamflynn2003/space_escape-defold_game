local SPAWN_INTERVAL = 3 -- Seconds between enemy spawns
local ITEM_SPAWN_INTERVAL = 8 -- Seconds between item spawns
local COIN_SPAWN_INTERVAL = 5 -- Seconds between coin spawns
local DEFAULT_ITEM_SPAWN_POSITION = vmath.vector3(600, 145, 0) -- Item spawn position
local DEFAULT_SPAWN_POSITION = vmath.vector3(600, 120, 0) -- Default spawn position
local SKULL_SPAWN_Y = 220 -- Y position for skulls
local SPIKE_SPAWN_Y = 100 -- Y position for spikes

local spawn_history = {} -- A table to track the last 3 enemies spawned
local last_item_spawned = nil -- Last item spawned (1 = Ammo, 2 = Health)
local item_spawn_count = 0 -- Count of consecutive spawns of the same item
local coin_spawn_timer = 0 -- Timer for coin spawns

function init(self)
	self.spawn_timer = 0
	self.item_spawn_timer = 0
	coin_spawn_timer = 0
	math.randomseed(os.time()) -- Seed the random number generator
end

function check_recent_spawn(enemy_type)
	-- Check if the enemy type has been spawned 2 times already in the last 3 spawns
	local count = 0
	for _, recent_type in ipairs(spawn_history) do
		if recent_type == enemy_type then
			count = count + 1
		end
	end
	return count >= 2
end

function get_random_enemy_type()
	-- Generate a random enemy type, ensuring no enemy is repeated 3 times in a row
	local enemy_type

	repeat
		enemy_type = math.random(1, 6) -- 1 = Frog, 2 = Skull, 3 = Alien, 4 = Warrior, 5 = Monk, 6 = Spike
	until not check_recent_spawn(enemy_type)

	return enemy_type
end

function spawn_enemy()
	-- Get a random enemy type
	local enemy_type = get_random_enemy_type()

	-- Determine spawn position
	local spawn_position = vmath.vector3(DEFAULT_SPAWN_POSITION)

	-- Declare the enemy_id outside the if block
	local enemy_id

	-- Spawn the primary enemy
	if enemy_type == 1 then
		-- Spawn frog
		enemy_id = collectionfactory.create("#frogfactory", spawn_position, nil, {}, 1)
	elseif enemy_type == 2 then
		-- Spawn skull
		spawn_position.y = SKULL_SPAWN_Y
		enemy_id = collectionfactory.create("#skullfactory", spawn_position, nil, {}, 1)
	elseif enemy_type == 3 then
		-- Spawn alien
		enemy_id = collectionfactory.create("#alienfactory", spawn_position, nil, {}, 1)
	elseif enemy_type == 4 then
		-- Spawn warrior
		enemy_id = collectionfactory.create("#warriorfactory", spawn_position, nil, {}, 1)
	elseif enemy_type == 5 then
		-- Spawn monk
		enemy_id = collectionfactory.create("#monkfactory", spawn_position, nil, {}, 1)
	else
		-- Spawn spike (new spike factory) at y = 100 and z = 1.0 (in front of the foreground)
		spawn_position.y = SPIKE_SPAWN_Y
		enemy_id = collectionfactory.create("#spikefactory", spawn_position, nil, {}, 1)
	end

	-- Check if enemy_id is valid
	if enemy_id == nil then
		return
	end

	-- Update the spawn history
	table.insert(spawn_history, enemy_type)

	-- Keep only the last 3 spawn history records
	if #spawn_history > 3 then
		table.remove(spawn_history, 1)
	end
end

function spawn_item()
	-- Determine the item type to spawn
	local item_type
	if item_spawn_count >= 2 then
		-- Alternate item type if the same item was spawned twice
		repeat
			item_type = math.random(1, 3) -- 1 = Ammo, 2 = Health, 3 = Coin
		until item_type ~= last_item_spawned
		item_spawn_count = 0
	else
		-- Randomly pick an item type, ensuring no repeats
		repeat
			item_type = math.random(1, 3) -- Include Coin in random selection
		until item_type ~= last_item_spawned
	end

	-- Spawn the item
	if item_type == 1 then
		-- Spawn ammo
		collectionfactory.create("#ammofactory", DEFAULT_ITEM_SPAWN_POSITION, nil, {}, 1)
	elseif item_type == 2 then
		-- Spawn health
		collectionfactory.create("#healthfactory", DEFAULT_ITEM_SPAWN_POSITION, nil, {}, 1)
	elseif item_type == 3 then
		-- Spawn coin
		collectionfactory.create("#coinfactory", DEFAULT_ITEM_SPAWN_POSITION, nil, {}, 1)
	end

	-- Update tracking variables
	last_item_spawned = item_type
	item_spawn_count = item_spawn_count + 1
end

-- New function to spawn coins separately
function spawn_coin()
	-- Define Y values for coin spawn
	local coin_y_values = {145, 220, 200}

	-- Randomly assign a Y value from the list
	local coin_y = coin_y_values[math.random(1, #coin_y_values)]

	-- Update spawn position with randomly selected Y value
	local spawn_position = vmath.vector3(DEFAULT_ITEM_SPAWN_POSITION.x, coin_y, 0)

	-- Spawn the coin
	collectionfactory.create("#coinfactory", spawn_position, nil, {}, 1)
end

function update(self, dt)
	self.spawn_timer = self.spawn_timer + dt
	self.item_spawn_timer = self.item_spawn_timer + dt
	coin_spawn_timer = coin_spawn_timer + dt -- Update the coin spawn timer

	if self.spawn_timer >= SPAWN_INTERVAL then
		self.spawn_timer = 0
		spawn_enemy()
	end

	if self.item_spawn_timer >= ITEM_SPAWN_INTERVAL then
		self.item_spawn_timer = 0
		spawn_item()
	end

	-- Spawn coin every 5 seconds
	if coin_spawn_timer >= COIN_SPAWN_INTERVAL then
		coin_spawn_timer = 0
		spawn_coin()
	end
end
