local ITEM_SPAWN_INTERVAL = 4 -- Default Seconds between item spawns
local DEFAULT_ITEM_SPAWN_POSITION = vmath.vector3(600, 145, 0) -- Item spawn position

local last_item_spawned = nil -- Last item spawned (1 = Ammo, 2 = Health)
local item_spawn_count = 0 -- Count of consecutive spawns of the same item
local difficulty = 1 -- Default difficulty
local game_time = 0 -- Timer to track total game time
local ship_spawned = false -- Flag to track if ship has been spawned

function init(self)
	game_time = 0
	self.item_spawn_timer = 0
	self.last_item_spawned = nil -- Last item spawned (1 = Ammo, 2 = Health)
	self.item_spawn_count = 0 -- Count of consecutive spawns of the same item
	math.randomseed(os.time())

	-- Adjust difficulty based on the current object URL
	local current_obj_url = current_url(self)

	-- Check the current object URL and set the difficulty
	if current_obj_url == hash("/item_spawner_level2") then
		difficulty = 2
	elseif current_obj_url == hash("/item_spawner_level3") then
		difficulty = 3
		print("Item difficulty set to 3")
	end

	-- Adjust ITEM_SPAWN_INTERVAL based on the difficulty level
	if difficulty == 2 then
		ITEM_SPAWN_INTERVAL = 5 -- For medium difficulty, spawn every 5 seconds
	elseif difficulty == 3 then
		ITEM_SPAWN_INTERVAL = 7 -- For hard difficulty, spawn every 7 seconds
	end
end

function current_url(self)
	local current_id = go.get_id()
	print(current_id)
	return current_id  -- Return the hash of the object ID
end

function spawn_item()
	-- Determine the item type to spawn
	local item_type
	if item_spawn_count >= 2 then
		-- Alternate item type if the same item was spawned twice
		repeat
			item_type = math.random(1, 3) -- 1 = Ammo, 2 = Health, 3 = Coin
		until item_type ~= last_item_spawned
		item_spawn_count = 0
	else
		-- Randomly pick an item type
		repeat
			item_type = math.random(1, 2)
		until item_type ~= last_item_spawned
	end

	-- Spawn the item
	if item_type == 1 then
		-- Spawn ammo
		collectionfactory.create("#ammofactory", DEFAULT_ITEM_SPAWN_POSITION, nil, {}, 1)
	elseif item_type == 2 then
		-- Spawn health
		collectionfactory.create("#healthfactory", DEFAULT_ITEM_SPAWN_POSITION, nil, {}, 1)
	end

	-- Update tracking variables
	last_item_spawned = item_type
	item_spawn_count = item_spawn_count + 1
end

function spawn_ship()
	-- Spawn a ship after the specified time
	collectionfactory.create("#shipfactory", vmath.vector3(540, 213.5, 0), nil, {}, 1)
	print("Ship spawned!")
end

function update(self, dt)
	-- Track total game time
	game_time = game_time + dt

	-- Spawn item based on the spawn interval
	self.item_spawn_timer = self.item_spawn_timer + dt
	if self.item_spawn_timer >= ITEM_SPAWN_INTERVAL then
		self.item_spawn_timer = 0
		spawn_item()
	end

	-- Spawn a ship at the right times based on difficulty
	if difficulty == 1 and not ship_spawned and game_time >= 60 then
		spawn_ship()
		ship_spawned = true
	elseif difficulty == 2 and not ship_spawned and game_time >= 120 then
		spawn_ship()
		ship_spawned = true
	end
end
