local SPAWN_INTERVAL = 3.5 -- Seconds between enemy spawns

local DEFAULT_SPAWN_POSITION = vmath.vector3(600, 120, 0) -- Default spawn position
local SKULL_SPAWN_Y = 220 -- Y position for skulls
local SPIKE_SPAWN_Y = 100 -- Y position for spikes

local spawn_history = {} -- A table to track the last 3 enemies spawned
local difficulty = 1 -- Default difficulty

function init(self)
	self.spawn_timer = 0
	math.randomseed(os.time()) -- Seed the random number generator

	-- Adjust difficulty based on the current object URL
	local current_obj_url = current_url(self)
	-- Check the current object URL and set the difficulty
	if current_obj_url == hash("/mob_spawner_level2") then
		difficulty = 2
	elseif current_obj_url == hash("/mob_spawner_level3") then
		difficulty = 3
	end
end

function current_url(self)
	-- Get the ID of the current object (the object this script is attached to)
	local current_id = go.get_id()
	return current_id  -- Return the hash of the object ID
end

function check_recent_spawn(mob_type)
	-- Check if the mob type has been spawned 2 times already in the last 3 spawns
	local count = 0
	for _, recent_type in ipairs(spawn_history) do
		if recent_type == mob_type then
			count = count + 1
		end
	end
	return count >= 2
end

function get_random_mob_type()
	-- Generate a random mob type, ensuring no enemy is repeated 3 times in a row
	local mob_type

	repeat
		local rand = math.random(1, 10)
		if rand <= 8 then
			-- 80% chance to pick any mob other than Warrior (mob_type 1, 2, 3, 5, 6)
			mob_type = math.random(1, 6)
			if mob_type == 4 then
				mob_type = math.random(1, 3) -- Pick from Frog, Skull, Alien
			end
		else
			mob_type = 4
		end
	until not check_recent_spawn(mob_type)

	return mob_type
end

function spawn_mob()
	-- Get a random enemy type
	local mob_type = get_random_mob_type()
	local enemy_speed = 100

	-- Adjust speed based on difficulty
	if difficulty == 2 then
		enemy_speed = 100
	elseif difficulty == 3 then
		-- 50% chance to set speed to 70 (very slow) or 150 (very fast)
		if math.random(1, 2) == 1 then
			enemy_speed = 70 -- Very slow
		else
			enemy_speed = 150 -- Very fast
		end
		SPAWN_INTERVAL = 2.5
	end

	-- Determine spawn position
	local spawn_position = vmath.vector3(DEFAULT_SPAWN_POSITION)

	-- Declare the enemy_id outside the if block
	local mob_id

	-- Spawn the primary enemy based on mob type
	if mob_type == 1 then
		-- Spawn frog
		mob_id = collectionfactory.create("#frogfactory", spawn_position, nil, {}, 1)
	elseif mob_type == 2 then
		-- Spawn skull
		spawn_position.y = SKULL_SPAWN_Y
		mob_id = collectionfactory.create("#skullfactory", spawn_position, nil, {}, 1)
	elseif mob_type == 3 then
		-- Spawn alien
		mob_id = collectionfactory.create("#alienfactory", spawn_position, nil, {}, 1)
	elseif mob_type == 4 then
		-- Spawn warrior
		mob_id = collectionfactory.create("#warriorfactory", spawn_position, nil, {}, 1)
	elseif mob_type == 5 then
		-- Spawn monk
		mob_id = collectionfactory.create("#monkfactory", spawn_position, nil, {}, 1)
	else
		-- Spawn spike (new spike factory) at y = 100
		spawn_position.y = SPIKE_SPAWN_Y
		mob_id = collectionfactory.create("#spikefactory", spawn_position, nil, {}, 1)
	end

	-- Use the mob's URL to set the speed
	local mob_name_map = { "frog", "skull", "alien", "warrior", "monk", "spike" }
	local mob_name = mob_name_map[mob_type]
	local mob_url = mob_id[hash("/" .. mob_name)]

	if mob_url then
		msg.post(mob_url, "set_speed", { speed = enemy_speed })  -- Set the speed directly for the spawned mob
	end

	-- Update the spawn history
	table.insert(spawn_history, mob_type)

	-- Keep only the last 3 spawn history records
	if #spawn_history > 3 then
		table.remove(spawn_history, 1)
	end
end

function update(self, dt)
	self.spawn_timer = self.spawn_timer + dt

	-- If the spawn timer exceeds the spawn interval, spawn a new mob
	if self.spawn_timer >= SPAWN_INTERVAL then
		self.spawn_timer = 0
		spawn_mob()
	end
end
