local target_y = 200  -- The target Y value to reach when jumping
local jump_speed = 250 
local fall_speed = 150  -- Lower the fall speed for more hang time
local hang_time = 0.8  -- The time to stay at the peak height 
local hang_timer = 0  -- Timer to track how long we've been at peak height
local is_jumping = false
local is_falling = false
local is_shooting = false
local player_health = 4  -- Initialize player health to 4
local HIT_INTERVAL = 1
local hit_timer = 0
local is_invincible = false

local player_ammo = 1


local function play_animation(self, animation)
	-- Plays the animation within input parameters, unless the same animation is already playing
	if self.current_animation ~= animation then
		self.current_animation = animation
		msg.post("#sprite", "play_animation", { id = animation })
	end
end

function init(self)
	-- Acquire input focus
	msg.post(".", "acquire_input_focus")
	self.is_jumping = false
	self.is_falling = false
	self.current_animation = hash("run")

	player_health = 4
	player_ammo = 1
	msg.post("/hud#player_hud", "update_ammo", { ammo = player_ammo })
end

function on_input(self, action_id, action)
	if action_id == hash("jump") then
		if action.pressed and not is_jumping and not is_falling then
			-- Start the jump if the player is not already jumping or falling
			is_jumping = true
		elseif action.released and not is_falling then
			-- Interrupt the hang time and start falling immediately when the jump button is released
			is_falling = true
			hang_timer = 0  -- Reset the hang timer to start falling immediately
		end
	end
	if action_id == hash("shoot") and player_ammo > 0 then
		player_ammo = player_ammo - 1
		if action.pressed then
			-- Cancel jump or falling animations
			is_jumping = false
			is_falling = false
			is_shooting = true
			msg.post("/hud#player_hud", "update_ammo", { ammo = player_ammo })
		end
	end
end

function on_message(self, message_id, message, sender)
	-- Handle collision with enemy objects
	if message_id == hash("contact_point_response") then

		-- Check if the collision object is in the "enemy" group and if enough time has passed since the last hit
		if message.other_group == hash("enemy") then
			-- Only process the hit if the hit interval has passed and player isn't invincible
			if hit_timer >= HIT_INTERVAL and not is_invincible then
				-- Reset the hit timer
				hit_timer = 0

				-- Reduce health by 1 when colliding with an enemy
				player_health = player_health - 1

				-- Send the message to reduce health gui
				msg.post("/hud#player_hud", "update_health", { health = player_health })

				-- Set invincibility for a short time (to prevent multiple hits from the same enemy)
				is_invincible = true
				-- Set invincibility duration (for example, 0.5 seconds)
				timer.delay(0.5, false, function()
					is_invincible = false  -- Remove invincibility after the delay
				end)
			end
		end

		-- Collision with ammo pickup
		if message.other_group == hash("ammo") then
			-- Log ammo before pickup

			player_ammo = player_ammo + 1
			msg.post("/hud#player_hud", "update_ammo", { ammo = player_ammo })

			-- Destroy the ammo object
			go.delete(message.other_id)
		end

		-- Collision with health pickup
		if message.other_group == hash("health") then
			player_health = player_health + 1
			msg.post(":/hud#player_hud", "update_health", { health = player_health })

			-- Destroy the health object
			go.delete(message.other_id)
		end

	end

	-- Collision with coin pickup
	if message.other_group == hash("coin") then
		msg.post("main:/main#main", "update_score", { score = 50 })
		-- Destroy the coin object
		go.delete(message.other_id)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("jump") then
		if action.pressed and not is_jumping and not is_falling then
			-- Start the jump if the player is not already jumping or falling
			is_jumping = true
		elseif action.released and not is_falling then
			-- Interrupt the hang time and start falling immediately when the jump button is released
			is_falling = true
			hang_timer = 0  -- Reset the hang timer to start falling immediately
		end
	end
	if action_id == hash("shoot") and player_ammo > 0 then
		if action.pressed then
			-- Log ammo before shooting
			-- Cancel jump or falling animations
			is_jumping = false
			is_falling = false
			is_shooting = true
			msg.post("/bullet_spawner#bullet_spawner", "spawn_bullet")
			player_ammo = player_ammo - 1  -- Reduce ammo by 1 when shooting
			msg.post("/hud#player_hud", "update_ammo", { ammo = player_ammo })
		end
	end
end


local shooting_animation_duration = 0.5
local shooting_timer = 0 

function update(self, dt)
	local pos = go.get_position()
	hit_timer = hit_timer + dt

	-- Jumping logic
	if is_jumping then
		play_animation(self, hash("jump"))
		-- Move player upwards towards target_y at jump speed
		if pos.y < target_y then
			-- Apply jump speed to the y position
			pos.y = pos.y + jump_speed * dt
		end

		-- Once the player reaches target_y, start hang time
		if pos.y >= target_y then
			play_animation(self, hash("fall"))
			pos.y = target_y  -- Keep the player at target_y to stop upward movement
			is_jumping = false  -- Stop jumping once target_y is reached

			-- Start hang timer
			hang_timer = hang_time
			is_falling = false  -- Prevent falling immediately
		end
	end

	-- Handle hang time at peak height
	if hang_timer > 0 then
		hang_timer = hang_timer - dt  -- Decrease the timer
		if hang_timer <= 0 then
			-- Once hang time is over, start falling
			is_falling = true
		end
	end

	-- Falling logic (only if jumping is done and hang time is over)
	if is_falling then
		-- Move player down after hang time
		pos.y = pos.y - fall_speed * dt

		-- When the player reaches the ground
		if pos.y <= 120 then
			is_falling = false
			is_jumping = false
			pos.y = 120
			play_animation(self, hash("run"))
		end
	end

	-- Shooting Animation
	if is_shooting then
		play_animation(self, hash("shoot"))
		shooting_timer = shooting_timer + dt

		-- Once the shooting animation is finished, stop the shooting animation and allow other animations
		if shooting_timer >= shooting_animation_duration then
			is_shooting = false  -- Stop the shooting animation
			shooting_timer = 0  -- Reset the shooting timer
			if pos.y > 120 then
				is_falling = true
			end
			-- Only change animation to "run" or another appropriate state if falling/jumping has finished
			if not is_falling then
				play_animation(self, hash("run"))  -- Default back to run animation
			end
		end
	end

	-- Update player position
	go.set_position(pos)

	-- Player Death
	if player_health < 0 then
		msg.post("main:/main#main", "start_gameover")
		return
	end
end
